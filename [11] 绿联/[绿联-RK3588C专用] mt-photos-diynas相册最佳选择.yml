# 官网资料
# https://mtmt.tech
# https://mtmt.tech/docs/guide/install
# https://mtmt.tech/docs/example/intro
# https://mtmt.tech/docs/advanced/env
# https://hub.docker.com/r/mtphotos/mt-photos

# 支持vector向量的存储的postgresql
# https://hub.docker.com/r/mtphotos/mt-photos-pg

# 智能识别API
# https://github.com/MT-Photos/mt-photos-ai
# https://mtmt.tech/docs/advanced/ocr_api
# https://hub.docker.com/r/mtphotos/mt-photos-ai

# 人脸识别-deepface
# https://mtmt.tech/docs/advanced/facial_api
# https://mtmt.tech/docs/advanced/deepface_api
# https://hub.docker.com/r/mtphotos/mt-photos-deepface

# 人脸识别-insightface
# https://mtmt.tech/docs/advanced/insightface_api
# 基于kqstone大佬的仓库 https://github.com/kqstone/mt-photos-insightface-unofficial 打包
# https://github.com/MT-Photos/mt-photos-deepface/issues/16
# https://gitee.com/mt-photos/mt-photos-deepface/issues/IAM6GM

# ayaya大佬 针对mt-photos-ai 开发了RKNN 移植版本，可以调用RK3588的NPU来处理识别任务
# https://github.com/a15355447898a
# https://mtmt.tech/docs/advanced/rknn
# https://github.com/a15355447898a/mt-photos-ai-rk
# https://github.com/a15355447898a/mt-photos-insightface-rk

# 内置模型、Insightface模型、Deepface模型，它们是不同的模型，如果需要切换，请按设置中切换使用API识别模型的步骤 执行
# 如果换insightface的模型，也需要先按切换使用API识别模型的步骤执行 ，比如从 buffalo_l 换 antelopev2
# Insightface模型，识别速度更快，更准确（推荐）
# Deepface模型，添加人脸识别deepface API（备选）

# 想知道更多细节，强烈推荐查看官方文档，写的特别详细
# 前排提示，可免费试用一个月，99买断，试用结束后话可以用，但是无法更新显示以后添加的内容
# 强烈推荐无脑入，2024-11-27：已经涨价到118了

# CUDA版本镜像，未内置buffalo_l相关的模型文件；如果容器启动后，下载模型文件失败；请查看下载模型后目录映射给容器

# MT Photos AI 识别相关任务独立部署项目 (RKNN 移植版)
# 项目地址：https://github.com/a15355447898a/mt-photos-ai-rk
# 镜像地址：https://hub.docker.com/r/a15355447898a/mt-photos-ai-rknn
# 基于PaddleOCR实现的文本识别(OCR)接口，利用 RKNN 进行加速
# 基于Chinese-CLIP（OpenAI CLIP模型的中文版本）实现的图片、文本提取特征接口，利用 RKNN 进行加速

---
version: "3"
# 最后编辑时间：2025-10-23
# 2025-01-07 更新日志：mtphotos/mt-photos-ai 容器端口很早之前就修改为8060，补漏；某些arm设备如果mt-photos的日志提示数据库相关日志问题，那就把mt-photos-pgsql跑起来，关联上
# 2024-11-27 更新日志：增加mt-photos-insightface的compose，insightface和deepface两者选其一即可，新增各种类型的镜像及说明
# 2024-04-28 更新日志：新增mt-photos-deepface，修正部分错误内容，删减不需要的内容，新增人脸识别API使用支持cpu无avx指令的镜像，新增N卡驱动AI识别镜像编译教程
# 2025-10-23 更新日志：更新mt-photos-insightface，mt-photos-ai-rk，仅且换到RK3588的模板当中使用，能调用NPU，处理效果很不错，仅支持RK3588系列，例如绿联DH4300，香橙派5plus/pro
services:
  mt-photos:
    image: mtphotos/mt-photos:latest
    # 镜像地址，支持arm64v8
    container_name: mt-photos
    # 容器名字
    hostname: mt-photos
    # 主机名
    # privileged: true
    # 特权模式，赋予容器几乎与主机相同的权限
    volumes:
      - ./mt-photos/config:/config
      # 配置文件目录
      - /volume1/MT-Photos/相册上传:/upload
      # 上传目录，请根据实际情况修改，这里只是例子

      - /home:/绿联个人文件夹
      # 此为绿联的个人文件夹，若后续更新允许用户选择共享文件夹，再说
      - 【这里替换为你的数据存放目录】:/【自定义目录名字】
      # 本地相册目录，可自定义目录，可以写多个，默认为存储池1
      # - ./mt-photos/视频转码:/视频转码
      # 视频转码存放目录，非必要
      # - ./mt-photos/高清缩略图:/高清缩略图
      # 高清缩略图存放目录，非必要
    environment:
      - MT_SERVER_PORT=8063
      # 指定MT Photos服务端的端口，默认为8063，可自定义端口后直接使用host网络模式
      - PUID=1000
      - PGID=100
      # 用户和用户组权限，ssh中使用“id 用户名”查看，用户组一般为100(users)
      # 第一个用户而言，群晖为1026，新绿联为1001，linux类系统为1000，后续用户均+1
      - UMASK=022
      # 默认创建新文件的权限，一般写022
      - TZ=Asia/Shanghai
      # 时区
      ######################################
      # - REDIS_HOST=127.0.0.1
      # 指定要连接的Redis的地址，默认为127.0.0.1
      # - REDIS_PORT=6379
      # 指定要连接的Redis的端口号，默认为6379
      # - REDIS_PASSWORD=Redis的密码
      # 指定要连接的Redis的密码，具体看自己的配置单
      ######################################
      # https://mtmt.tech/docs/advanced/env
      # 以下内容来源于官方文档，均为默认，可以不写
      # - RAW_SUPPORT=open
      # RAW格式支持，默认开启
      # - SCAN_INTERVAL=15
      # 指定自动扫描图库的间隔时间，单位为分钟，默认为15，最大支持9999
      # - EXIF_OVERWRITE_TYPE=overwrite_original_in_place
      # 指定exiftool写入模式，默认为overwrite_original
      # - DAY_MAX_FILE_NUM=298
      # 时间线模式中单天显示的照片数量上限，默认为298
      # - STREAM_LINK_TTL=30
      # 分享的串流地址有效时间，单位为分钟，默认为30
      # CACHE_DIR_PATH=/config/cache
      # 自定义保存缩略图的位置，默认为/config/cache
      ######################################
      # - PROXY_HOST_AMAP=http://xxx.com/
      # 指定代理地址-高德api，默认为空
      # - PROXY_HOST_MAPBOX=http://xxx.com/
      # 指定代理地址-mapbox api，默认为空
      ######################################
      # - PROXY_HOST_AUTH=http://xxx.com/
      # 指定代理地址-授权服务器，默认为空，仅作预留，不写
      ######################################
    # network_mode: bridge
    network_mode: host
    # 推荐自定义MT的WebUI端口，然后直接用host模式
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    # ports:
      # - 8063:8063/tcp
      # WebUI http端口
    restart: always
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3

############################################################################

  mt-photos-ai-rk:
    image: a15355447898a/mt-photos-ai-rknn:latest
    # 镜像地址，仅支持部分rk3588
    container_name: mt-photos-ai-rk
    # 容器名字
    hostname: mt-photos-ai-rk
    # 主机名
    privileged: true
    # 特权模式，赋予容器几乎与主机相同的权限
    devices:
      - /dev/dri:/dev/dri
    # 调用核显
    volumes:
        - /proc/device-tree/compatible:/proc/device-tree/compatible
        - /usr/lib/librknnrt.so:/usr/lib/librknnrt.so
        # 照抄
    environment:
      - API_AUTH_KEY=1234567890
      # 智能识别API，可以随便写，在mt-photos内设置要对应该项
    # network_mode: bridge
    network_mode: host
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    # ports:
      # - 8060:8060/tcp
      # API 端口
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可
    restart: always
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3

############################################################################

  mt-photos-insightface:
    image: a15355447898a/mt-photos-insightface-rknn:latest
    # 镜像地址，大佬做的适配了rk3588系列的镜像，支持调用NPU处理
    container_name: mt-photos-insightface
    # 容器名字
    hostname: mt-photos-insightface
    # 主机名
    privileged: true
    # 特权模式，赋予容器几乎与主机相同的权限
    devices:
      - /dev/dri:/dev/dri
    # 调用核显
    volumes:
        - /proc/device-tree/compatible:/proc/device-tree/compatible
        - /usr/lib/librknnrt.so:/usr/lib/librknnrt.so
        # 照抄
    environment:
      - API_AUTH_KEY=1234567890
      # 人脸识别API，可以随便写，在mt-photos内设置要对应该项
    # network_mode: bridge
    network_mode: host
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    # ports:
      # - 8066:8066/tcp
      # API 端口
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可
    restart: always
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
