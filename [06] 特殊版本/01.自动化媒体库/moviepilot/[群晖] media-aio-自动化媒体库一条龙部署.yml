# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
##############################################
# 如果docker网络拉取失败，可以给镜像地址加上加速源，使用文本批量替换即可将下方中括号的内容批量替换掉
# [images: ] → [images: k-docker.asia/]，注意"images: "是带空格
##############################################
# 自动化媒体库的工作流程
# MP负责订阅搜刮PT站内的资源，将种子以及下载路径(容器的路径)，发送给QB/TR进行下载
# 当MP检测下载完毕后，将会根据整理刮削命名规则进行处理，转移到媒体库目录中
# 这样一来，PEJ检测到本地有新的媒体入库，并且本地已经存在刮削数据可以读取，即完成入库
# iyuu是用于辅助做种的；v2raya是用于解决网络不顺畅的问题，可以不搞；cookiecloud用于定期把电脑浏览器的PT站cookie同步到MP上
# QB适合下种，TR适合做种

##############################################
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
#
# /volume1/media
#          |---/动漫
#          |---/下载
#          |
#          |---/电影
#          |     |---/国产电影
#          |     |---/欧美电影
#          |     |---/日韩电影
#          |
#          |---/电视剧
#                 |---/国产电视剧
#                 |---/欧美电视剧
#                 |---/日韩电视剧

# ①：/volume1/media——————media为共享文件夹，存储池预设为第1个存储池，请根据自己实际情况修改【这是实际路径】
# ②：/volume1/media/下载——————用于QB和TR下载，MP中设置对应的容器路径/downloads用于传递【这是实际路径】
# ③：/volume1/media/电影；/volume1/media/电视剧——————用于媒体库的分类存放，可根据自己需要增添【这是实际路径】
# ④：请在MP设置中，把下载目录设置为“/meida/下载”；把 电影/电视剧 等分类的目录设置从“/meida”开始选择【这是容器路径】
# ⑤：MP和QB,TR都使用同一条路径映射“/meida/下载”【必须完全一样】
# 不懂可以看看MP-01和MP-03这两张图，MP-02是效果图
# ⑥：/volume1/media/动漫——————用于ani-rss动漫bt下载，自身带重命名整理功能，刮削功能可以由PEJ负责
# ⑦：注意，需要在ani-rss的设置中，将下载地址修改为/ani-rss

##############################################
# 注意事项
# 本模板包含PLEX,EMBY,JF,QB,TR,MP,ANI-RSS,COOKIECLOUD,IYUU,V2RAYA,WATCHTOWER,PEERBANHELPER
# 如果设置了使用网络代理(不一定是v2raya，可以是软路由)，请提前启用并激活好魔法，否则EMBY,JF,MP无法正常连接TMDB，MP可能无法正常下载核心文件
# 模板预设使用的网络代理为v2raya的http端口20171，如果使用了别的，请根据实际情况修改，总不会有人连魔法都不会用不？不会吧？不会吧？
# 部分参数不说明，如果想知道有什么用，可以参考其他的模板
# 权限均设置为root以保证访问不会出错，注释内容多多阅读
# 媒体库路径预设使用第一个存储池/volume1，请根据实际情况修改
# 媒体库，iyuu，cookiecloud使用bridge；其余统一使用host，需要改变端口就去修改变量，看注释说明
# iyuu使用host模式会占用mariadb/mysql的3306端口，所以使用bridge
# QB和TR使用host，只要宿主机拥有IPV6，即可连上IPV6传输数据，如果宿主机没有，请检查网络环境

# EMBY和JF在【控制台-高级】中生成【API密钥】，MP需要用
# PLEX需要注册登录生成登录密钥，用于登录使用，设置好后，浏览器F12->网络，从Plex请求URL中获取的X-Plex-Token，MP需要用

# QB 初始化账号为 admin，密码在日志中查看
# QB可选修改：用于传入连接的端口，随机生成一个，记得看站规；并且在路由器上做好端口映射，如果有公网的话
# QB关闭：启用 DHT (去中心化网络) 以找到更多用户
# QB关闭：启用用户交换 (PeX) 以找到更多用户
# QB关闭：启用本地用户发现以找到更多用户
# QB关闭：启用跨站请求伪造 (CSRF) 保护

# TR需要把汉化文件存放到对应目录，看注释说明
# TR不打开：启用随机端口，或使用固定端口。端口号设置好并且在路由器上做好端口映射，如果有公网的话
# TR关闭：启用本地用户发现(LPD)
# TR关闭：启用带宽管理(µTP)
# TR关闭：启用分布式哈希表(DHT)
# TR关闭：启用用户交换

# iyuu需要注册扫码获取token，初始化安装第一步只需要输入token即可

# MP如果遇到cookiecloud设置正确但是无法同步成功的，试试重启几次再去同步，实在不是，手动添加吧
# MP v2.0.7及以上版本，已支持通过UI进行用户认证：点击用户头像 -> 用户认证，无需配置环境变量，模板继续保留原有的认证变量

# ANI-RSS的用户名和密码均为 admin

# cookiecloud使用教程：https://post.smzdm.com/p/a905kd5p

##############################################
# 镜像地址
# https://hub.docker.com/r/linuxserver/plex
# https://hub.docker.com/r/linuxserver/emby
# https://hub.docker.com/r/nyanmisaka/jellyfin
# https://hub.docker.com/r/linuxserver/qbittorrent
# https://hub.docker.com/r/linuxserver/transmission
# https://hub.docker.com/r/jxxghp/moviepilot
# https://hub.docker.com/r/easychen/cookiecloud
# https://hub.docker.com/r/iyuucn/iyuuplus-dev
# https://hub.docker.com/r/mzz2017/v2raya
# https://hub.docker.com/r/wushuo894/ani-rss
# https://hub.docker.com/r/containrrr/watchtower
# https://hub.docker.com/r/privoce/vocechat-server
# https://hub.docker.com/_/redis
# https://hub.docker.com/_/postgres

##############################################
# MP 文档
# https://github.com/jxxghp/MoviePilot
# https://wiki.movie-pilot.org
# MP 插件
# https://wiki.movie-pilot.org/zh/plugin
# PT玩家看站规！！！PT玩家看站规！！！PT玩家看站规！！！

# ani-rss 文档：https://docs.wushuo.top

# iyuu 文档：https://doc.iyuu.cn/guide/getting-started

# 媒体库规范化命名手册（PEJ通用）：https://emby.media/support/articles/Home.html

# peerbanhelper文档：https://github.com/PBH-BTN/PeerBanHelper

# vocecha文档：https://doc.voce.chat/zh-cn

##############################################
# 各个服务的WebUI
# plex            ip:32400
# emby            ip:8096
# jellyfin        ip:8097
# qbittorrent     ip:8085
# transmission    ip:9091
# moviepilot      ip:55055
# ani-rss         ip:7789
# cookiecloud     ip:8188
# peerbanhelper   ip:9898
# iyuu            ip:8780
# v2raya          ip:2017
  # sock 代理端口：20170
  # http 代理端口：20171
  # http 代理端口(带分流规则)：20172
# watchtower      不存在，后台自动更新容器镜像
# vocechat        ip:3456
# redis + pgsql   不存在webui，只需要让mp链接即可

# 如果要使用peerbanhelper，QB和TR必须使用host网络模式，模板默认为host网络模式，且对QB和TR的版本号有要求，注意查看文档
# redis和pgsql均使用bridge网络模式，仅提供给MP使用，如果你有单独已经部署好的redis和pgsql容器，懂得如何链接上，自行修改，本模板已经整合号，部署即可使用
# 2025-09-10：MP已经支持在WebUI上进行认证，因此删除掉认证部分，同时，部分变量在compose中写了，就无法在WebUI上随时修改，因此也删掉了
# 2025-09-10：本模板改为MP使用带数据库的版本，因某些原因，某些NAS无法好好地由现有版本升级为带数据库版本，所以改模板适合全新部署，如果需要迁移版，可以查看官方文档部署一个pgloader即可（单独写在了说明文档中，详见github）
# 2025-09-10：实测以下NAS可以完美迁移：飞牛OS，群晖，绿联(仅amd64)，极空间

##############################################

---
version: "3"
# 最后编辑时间：2025-09-10
services:
##############################################
#                                            #
#         媒体库部分，全选/不选/选其一         #
#                                            #
##############################################

  plex:
    image: linuxserver/plex:latest
    container_name: plex
    hostname: plex
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /volume1/docker/plex:/config
      # 配置文件目录
      - /volume1:/data
      # 媒体库目录，可以自定义，可以写多个
    environment:
      - PLEX_CLAIM=【登录密钥】
      # 登录密钥，打开下面的地址，注册并登录后获取，如果对账号注册有洁癖，plex账号哪怕你买了pass通行证也可以注销
      # https://plex.tv/claim
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=Asia/Shanghai
      
      # 以下是为PLEX添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      - ALL_PROXY=http://localhost:20171
      - HTTP_PROXY=http://localhost:20171
      # 更换为自己的http代理
      # 切记设置好V2raya，如果你没有配置魔法就注释掉

    network_mode: bridge
    ports:
      - 32400:32400
    restart: unless-stopped

##############################################

  emby:
    image: linuxserver/emby:latest
    # 镜像地址，如需测试版追新，latest更改为beta，不区分设备架构
    # 如果使用开心版，将镜像改为 amilys/embyserver，arm64v8设备使用amilys/embyserver_arm64v8
    container_name: emby
    hostname: emby
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /volume1/docker/emby:/config
      # 配置文件目录
      - /volume1:/data
      # 媒体库目录，可以自定义，可以写多个
    environment:
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=Asia/Shanghai
      
      # 以下是为EMBY添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      # emby推荐不写，而是安装神医插件：https://github.com/sjtuross/StrmAssistant
      - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      - ALL_PROXY=http://localhost:20171
      - HTTP_PROXY=http://localhost:20171
      # 更换为自己的http代理
      # 切记设置好V2raya，如果你没有配置魔法就注释掉
      
    network_mode: bridge
    ports:
      - 8096:8096
    restart: unless-stopped

##############################################

  jellyfin:
    image: nyanmisaka/jellyfin:latest
    # 镜像地址，无脑推荐使用ny大佬的JF，做好了全部修正优化，开箱即用  
    # x86设备默认用latest，arm64v8设备用latest-rockchip
    container_name: jellyfin
    hostname: jellyfin
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /volume1/docker/jellyfin/config:/config
      # 配置文件目录
      - /volume1:/media
      # 媒体库目录，可以自定义，可以写多个
      - /volume1/docker/jellyfin/cache:/cache
      # 缓存目录
    environment:
      - TZ=Asia/Shanghai
      
      # 以下是为JF添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      - ALL_PROXY=http://localhost:20171
      - HTTP_PROXY=http://localhost:20171
      # 更换为自己的http代理
      # 切记设置好V2raya，如果你没有配置魔法就注释掉
      
    network_mode: bridge
    ports:
      - 8097:8096
    restart: unless-stopped

##############################################
#                                            #
#         下载器部分，全选/不选/选其一         #
#                                            #
##############################################

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    hostname: qbittorrent
    volumes:
      - /volume1/docker/qbittorrent:/config
      # 配置文件目录
      - /volume1/media/下载:/downloads
      # 默认下载目录
      - /volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤
      - /volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
      
      # - 【这里替换为你想映射到QB内的路径】:/【这里替换为你想映射到QB内的路径】
      # 下载目录，可以自定义，可以写多个，这里如果你理解了映射是什么，就会明白是什么意思，如果不会，别写
      # - 【这里替换为你的数据存放目录】/Torrents监控自动下载目录:/watch
      # 种子监控自动下载目录，非必须，用于把种子放到目录内后，自动添加下载任务
      
    environment:
      - WEBUI_PORT=8085
      # 自定义WebUI端口
      - TORRENTING_PORT=25800
      # 自定义传输端口，别写6881，看站规！！！
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=Asia/Shanghai
    network_mode: host
    restart: unless-stopped

##############################################

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    hostname: transmission
    volumes:
      - /volume1/docker/transmission:/config
      # 配置文件目录
      - /volume1/media/下载:/downloads
      # 默认下载目录
      - /volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤
      - /volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
      
      # - 【这里替换为你想映射到TR内的路径】:/【这里替换为你想映射到TR内的路径】
      # 下载目录，可以自定义，可以写多个，这里如果你理解了映射是什么，就会明白是什么意思，如果不会，别写
      # - 【这里替换为你的数据存放目录】/Torrents监控自动下载目录:/watch
      # 种子监控自动下载目录，非必须，用于把种子放到目录内后，自动添加下载任务
      
    environment:
      - TRANSMISSION_WEB_HOME=/config/webui
      # WEBUI主页路径，写容器路径，用于放汉化文件
      # 汉化文件下载地址：https://github.com/ronggang/transmission-web-control
      # 将 "/src" 这个文件夹里的东西放到 "/volume1/docker/transmission/webui" 内即可
      - USER=dsm
      - PASS=dsm
      # TR账号密码，预设为dsm，记住一定要修改密码，否则后果自负
      - PEERPORT=24680
      # 自定义peer传输端口
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=Asia/Shanghai
    network_mode: host
    # 如需修改WebUI的端口，到/config/setting.json中第54行的"rpc-port": 9091的端口改为自定义端口
    restart: unless-stopped

##############################################
#                                            #
#       自动化刮削整理工具，根据需要部署        #
#                                            #
##############################################


  ani-rss:
    image: wushuo894/ani-rss:latest
    container_name: ani-rss
    hostname: ani-rss
    volumes:
      - /volume1/docker/ani-rss:/config
      # 配置文件目录
      - /volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
    environment:
      - PORT=7789
      # 自定义容器端口
      - TZ=Asia/Shanghai
    network_mode: host
    restart: unless-stopped

##############################################
    
  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    container_name: moviepilot-v2
    hostname: moviepilot-v2
    restart: unless-stopped
    network_mode: host

##############################################
## 第一次运行时，MoviePilot 会下载大量文件到本地，请在留意日志中的进度，如果有什么问题，可以寻找网友求助
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 使MP支持内建的重启操作，用于自动更新后重启
      - /volume1/docker/moviepilot-v2/core:/moviepilot 
      ## 程序主目录
      - /volume1/docker/moviepilot-v2/config:/config
      ## 配置目录
      - /volume1/media/下载:/downloads
      # 默认下载目录
      - /volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤

      - /volume1/docker/qbittorrent/qBittorrent/BT_backup:/QB-BT
      - /volume1/docker/transmission/torrents:/TR-BT
      # 用于自动转种所使用的路径，请根据实际情况修改，模板仅供参考，如不需要，则删除掉

##############################################
    environment:
      - MOVIEPILOT_AUTO_UPDATE=true
      # 设置容器重启时自动更新，true/release/dev/false，默认release，插件的自动更新要设置为true
      # 需要能正常连接Github 注意：如果出现网络问题可以配置PROXY_HOST
      - API_TOKEN=1234567890123456
      # API密钥，V1版本默认为moviepilot，V2版本需要手动配置为大于等于16个字符的复杂字符串
      # 如配置不符合要求将会强制重新生成，可在首次启动的启动日志或env配置文件中查看最新的值
      # 在媒体服务器Webhook、微信回调等地址配置中需要加上 ?token= 该值
      
      - NGINX_PORT=55055
      # WebUI服务端口，默认为3000，预设为55055，可自行修改
      - PORT=55056
      # API端口，默认为3001，预设为55056，可自行修改
      
      - SUPERUSER=admin
      # 超级管理者用户名，默认为admin，可在MP内修改，初次安装后失效
      # 密码在日志里，只会在第一次部署出现，如果忘记，可以文本形式打开 /config/logs/moviepilot.log 该文件，查看日志获取
      # 如果非初始密码忘记了，得删除pgsql的所有文件，然后重新配置，注意查看，可在MP内修改

      - TZ=Asia/Shanghai
      # 时区

      # - MOVIE_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/{{title}}.{{original_name}}
      # - TV_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/S0{{season}}/{{original_name}}
      # 电影和电视剧重命名格式，个人自用，默认不使用，仅作记录

########################################
#### 数据库 ####
# 不需要修改，照抄

      ### 如果你有一个pgsql的容器，懂得使用方法，可以根据实际情况填写 ###
      - DB_TYPE=postgresql
      - DB_POSTGRESQL_HOST=localhost
      - DB_POSTGRESQL_PORT=55053
      # pgsql数据库的访问端口，本模板pgsql的端口预设为55053
      - DB_POSTGRESQL_DATABASE=moviepilot
      - DB_POSTGRESQL_USERNAME=moviepilot
      - DB_POSTGRESQL_PASSWORD=moviepilot
      # pgsql数据库的子数据库的名字、账号、密码，统一为 moviepilot

      ### 如果你有一个redis的容器，懂得使用方法，可以根据实际情况填写 ###
      - CACHE_BACKEND_TYPE=redis
      - CACHE_BACKEND_URL=redis://:moviepilot@localhost:55054
      # 连接redis，本模板redis的访问端口预设为55054
    depends_on:
      mp-pgsql:
        condition: service_healthy
      mp-redis:
        condition: service_healthy
    # 关联pgsql和redis，照抄

##############################################
#                                            #
#         给MP配上数据库，模板包含，必须        #
#                                            #
##############################################
# 不需要修改，照抄

 mp-redis:
    image: redis:latest
    container_name: mp-redis
    hostname: mp-redis
    command: redis-server --save 600 1 --requirepass moviepilot
    # 最后一串字符为redis的密码，预设为moviepilot
    volumes:
      - /volume1/docker/moviepilot/redis:/data
      # 数据目录
    network_mode: bridge
    # 模板预设使用bridge网络模式，如果懂得使用方法，可以根据实际情况来修改
    ports:
      - 55054:6379/tcp
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可，模板预设
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mp-pgsql:
    image: postgres:latest
    container_name: mp-pgsql
    hostname: mp-pgsql
    volumes:
      - /volume1/docker/moviepilot/pgsql:/var/lib/postgresql/data
      # 数据目录
    environment:    
      - POSTGRES_DB=moviepilot
      - POSTGRES_USER=moviepilot
      - POSTGRES_PASSWORD=moviepilot
      # 预设新建一个子数据库，子账号及其密码，统一为 moviepilot
    network_mode: bridge
    ports:
      - 55053:5432/tcp
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moviepilot -d moviepilot"]
      interval: 10s
      timeout: 5s
      retries: 5

##############################################
#                                            #
#          其他辅助工具，根据需要部署          #
#                                            #
##############################################

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    hostname: watchtower
    network_mode: host
    # 并不存在端口，只是减少新增网络
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # docker核心
    environment:
      - WATCHTOWER_CLEANUP=true
      # 更新后移除旧的镜像
      - TZ=Asia/Shanghai
    restart: unless-stopped

##############################################

  cookiecloud:
    image: easychen/cookiecloud:latest
    container_name: cookiecloud
    hostname: cookiecloud
    network_mode: bridge
    ports:
      - 8188:8088/tcp
      # WebUI 端口，可能会有别的服务使用8088，所以改用bridge
    restart: unless-stopped

##############################################

  peerbanhelper:
    image: ghostchu/peerbanhelper:latest
    container_name: peerbanhelper
    hostname: peerbanhelper
    stop_grace_period: 30s
    volumes:
      - /volume1/docker/peerbanhelper:/app/data
      # 配置文件目录
      - /volume1/docker/peerbanhelper/tmp:/tmp
      # 临时缓存目录
    network_mode: host
    restart: unless-stopped

##############################################

  iyuuplus:
    image: iyuucn/iyuuplus-dev:latest
    container_name: iyuuplus
    hostname: iyuuplus
    volumes:
      - /volume1/docker/iyuuplus/iyuu:/iyuu
      # 配置文件目录，存放源码
      - /volume1/docker/iyuuplus/data:/data
      # 数据库目录，存放mysql数据库
    network_mode: bridge
    ports:
      - 8780:8780
      # 注：8780是容器内nginx的监听端口，反向代理了 8787、3131
    restart: unless-stopped

##############################################

  v2raya:
    image: mzz2017/v2raya:latest
    container_name: v2raya
    hostname: v2raya
    environment:
      - V2RAYA_LOG_FILE=/tmp/v2raya.log
      - V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray
    volumes:
      - /volume1/docker/v2raya:/etc/v2raya
      # 配置文件目录
      - /etc/resolv.conf:/etc/resolv.conf
      # 照抄，踩点了，有该文件存在
    network_mode: bridge
    # 由于书写有不同方式，这里统一采用bridge，使用不支持透明代理的模板，如果你清楚如何使用，则自行修改
    # 你直接写 服务器的IP:[201710-20172] 进行访问，例如 emby/JF 变量中的网络代理参数
    ports:
      - 2017:2017/tcp
      # WebUI 端口：2017
      - 20170-20172:20170-20172/tcp
      # sock 代理端口：20170
      # http 代理端口：20171
      # http 代理端口(带分流规则)：20172
    restart: unless-stopped

##############################################

  vocechat:
    image: privoce/vocechat-server:latest
    # 镜像地址，如果为arm64则使用：privoce/vocechat-server:latest-arm64
    container_name: vocechat
    hostname: vocechat
    network_mode: bridge
    # 推荐使用bridge模式，3000有别的docker镜像要用
    ports:
      - 3456:3000/tcp 
      # WebUI http端口
    restart: unless-stopped

