# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上
# 根据PT站站规，MP作者文档，ANI-RSS作者声明，严禁在互联网任何公开场合讨论相关内容，本模板同上

# 官方文档，强烈建议耐心看完
# https://github.com/jxxghp/moviepilot
# https://hub.docker.com/r/jxxghp/moviepilot
# https://wiki.movie-pilot.org

# 插件库
# https://github.com/jxxghp/MoviePilot-Plugins
# https://github.com/thsrite/MoviePilot-Plugins
# https://github.com/honue/MoviePilot-Plugins
# https://github.com/InfinityPacer/MoviePilot-Plugins

# 大部分配置可启动后通过WEB管理界面进行配置，但仍有部分配置需要通过环境变量/配置文件进行配置。
# MP v2.0.7及以上版本，已支持通过UI进行用户认证：点击用户头像 -> 用户认证，无需配置环境变量，模板继续保留原有的认证变量
# 配置文件映射路径：/config，配置项生效优先级：环境变量 > env文件（或通过WEB界面配置） > 默认值。
# 该模板将部分参数都简化掉，留下一些个人认为必要的参数以便于修改，剩下的参数设置可以在MP内设置

####################
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
#
# /存储池/.../media
#             |---/下载
#             |
#             |---/电影
#             |     |---/国产电影
#             |     |---/欧美电影
#             |     |---/日韩电影
#             |
#             |---/电视剧
#                    |---/国产电视剧
#                    |---/欧美电视剧
#                    |---/日韩电视剧
#
# ①：/存储池1/meida——————media为共享文件夹，存储池预设为第1个存储池，请根据自己实际情况修改【这是实际路径】
# ②：/存储池1/meida/下载——————用于QB和TR下载，MP中设置对应的容器路径/downloads用于传递【这是实际路径】
# ③：/存储池1/meida/电影；/存储池1/meida/电视剧——————用于媒体库的分类存放，可根据自己需要增添【这是实际路径】
# ④：请在MP设置中，把下载目录设置为“/meida/下载”；把 电影/电视剧 等分类的目录设置从“/meida”开始选择【这是容器路径】
# ⑤：MP和QB,TR都使用同一条路径映射“/meida/下载”【必须完全一样】
# 不懂可以看看MP-01和MP-03这两张图，MP-02是效果图，实在不是，你不如直接用自动化媒体库一条龙部署那张模板参考参考怎么部署的


# 数据库版说明
# 1、删掉站点认证，因为官方已经支持在WebUI上进行认证的操作了，如果还是喜欢在模板上写好，部署好就自动完成部署的，可以自己写上，说实话，我也喜欢这样，奈何这样会导致模板贼长
# 2、记得【】删除掉，故意这么写的，要是不删，部署会出错，出错你就知道没改好，我故意这么搞的
# 3、如果有原本的数据，务必备份好数据再部署

---
version: "3"
# 最后编辑时间：2025-09-10
services:
  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    # 镜像地址
    container_name: moviepilot-v2
    # 容器名字
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    # privileged: true
    # 特权模式，赋予容器几乎与主机相同的权限
    network_mode: host
    # 推荐自定义MP的WebUI端口，然后直接用host模式，webui为"nas的ip:55055"

    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    # 关联pgsql和redis，照抄

########################################
## 第一次运行时，moviepilot 会下载大量文件到本地，请在留意日志中的进度，如果有什么问题，可以寻找网友求助
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 使MP支持内建的重启操作，用于自动更新后重启
      - ./moviepilot-v2/core:/moviepilot/.cache/ms-playwright
      # 浏览器内核
      - ./moviepilot-v2/config:/config
      # 配置目录
      - 【这里替换为你的媒体库及下载目录的上一级目录路径】:/media
      # 设置一个总目录，以便于后续目录配置的统一修改，也可以自定义，但一定要确认参数无误，见上目录结构说明的④⑤

      # - 【这里替换为你的docker数据存放目录】/qbittorrent/qBittorrent/BT_backup:/QB-BT
      # - 【这里替换为你的docker数据存放目录】/transmission/torrents:/TR-BT
      # 用于自动转种所使用的路径，分别为QB配置目录里面的BT_backup路径地址，TR配置目录里面的torrents路径地址，请根据实际情况修改，模板仅供参考

########################################
    environment:
      - MOVIEPILOT_AUTO_UPDATE=true
      # 设置容器重启时自动更新，true/release/dev/false，默认release，插件的自动更新要设置为true
      # 需要能正常连接Github 注意：如果出现网络问题可以配置PROXY_HOST
      - API_TOKEN=1234567890123456
      # API密钥，V1版本默认为moviepilot，V2版本需要手动配置为大于等于16个字符的复杂字符串
      # 如配置不符合要求将会强制重新生成，可在首次启动的启动日志或env配置文件中查看最新的值
      # 在媒体服务器Webhook、微信回调等地址配置中需要加上 ?token= 该值
      
      - NGINX_PORT=55055
      # WebUI服务端口，默认为3000，预设为55055，可自行修改
      - PORT=55056
      # API端口，默认为3001，预设为55056，可自行修改

      - SUPERUSER=admin
      # 超级管理者用户名，默认为admin，可在MP内修改，初次安装后失效
      # 密码在日志里，只会在第一次部署出现，如果忘记，可以文本形式打开 /config/logs/moviepilot.log 该文件，查看日志获取，否则得删除pgsql的所有文件，然后重新配置，注意查看，可在MP内修改

      - UMASK=022
      # 默认创建新文件的权限，一般写022，MP默认为000，可以不写，也可以考虑设置为022
      - TZ=Asia/Shanghai
      # 时区

      # - MOVIE_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/{{title}}.{{original_name}}
      # - TV_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/S0{{season}}/{{original_name}}
      # 电影和电视剧重命名格式，个人自用，默认不使用


      ### 如果你有一个pgsql的容器，懂得使用方法，可以根据实际情况填写 ###
      - DB_TYPE=postgresql
      # 数据库类型，用的pgsql，保持默认
      - DB_POSTGRESQL_HOST=这里是数据库的IP地址，也就是你的NAS的IP地址
      # pgsql数据库的IP地址，请根据实际情况填写
      - DB_POSTGRESQL_PORT=55053
      # pgsql数据库的访问端口，本模板pgsql的端口预设为55053
      - DB_POSTGRESQL_DATABASE=moviepilot
      - DB_POSTGRESQL_USERNAME=moviepilot
      - DB_POSTGRESQL_PASSWORD=moviepilot
      # pgsql数据库的子数据库的名字、账号、密码，统一为 moviepilot


      ### 如果你有一个redis的容器，懂得使用方法，可以根据实际情况填写 ###
      - CACHE_BACKEND_TYPE=redis
      - CACHE_BACKEND_URL=redis://:moviepilot@【这里是redis的IP地址，也就是你的NAS的IP地址】:55054
      # 连接redis，本模板redis的访问端口预设为55054
      # 书写格式为 redis://:【redis的密码】@【redis的IP地址】:【redis的访问端口】


  redis:
    image: redis:latest
    # 镜像地址
    container_name: mp-redis
    # 容器名字
    hostname: mp-redis
    # 主机名
    command: redis-server --save 600 1 --requirepass moviepilot
    # 最后一串字符为redis的密码，预设为moviepilot
    volumes:
      - ./redis:/data
      # 数据目录
    network_mode: bridge
    # 模板预设使用bridge网络模式，如果懂得使用方法，可以根据实际情况来修改
    ports:
      - 55054:6379/tcp
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可，模板预设
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # 照抄


  postgresql:
    image: postgres
    # 镜像地址
    container_name: mp-pgsql
    # 容器名
    hostname: mp-pgsql
    # 主机名
    volumes:
      - ./pgsql:/var/lib/postgresql/data
      # 数据目录
    environment:
      - POSTGRES_DB=moviepilot
      - POSTGRES_USER=moviepilot
      - POSTGRES_PASSWORD=moviepilot
      # 预设新建一个子数据库，子账号及其密码，统一为 moviepilot
    network_mode: bridge
    # 模板预设使用bridge网络模式，如果懂得使用方法，可以根据实际情况来修改
    ports:
      - 55053:5432/tcp
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可，模板预设
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moviepilot -d moviepilot"]
      interval: 10s
      timeout: 5s
      retries: 5
    # 照抄
